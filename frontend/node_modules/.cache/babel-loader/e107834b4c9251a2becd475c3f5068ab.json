{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      credentials: 'include' // посылает токен в куки вместе с запросом.\n      //headers: this._headers, \n\n    }).then(res => this._checkResponse(res));\n  }\n\n  editAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      credentials: 'include' // headers: this._headers,\n\n    }).then(res => this._checkResponse(res));\n  }\n\n  addCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      credentials: 'include' // headers: this._headers,\n\n    }).then(res => this._checkResponse(res));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      credentials: 'include' //headers: this._headers,\n\n    }).then(res => this._checkResponse(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      credentials: 'include' //headers: this._headers,\n\n    }).then(res => this._checkResponse(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      credentials: 'include' //headers: this._headers,\n\n    }).then(res => this._checkResponse(res));\n  }\n\n}\n\nconst api = new Api({\n  //baseUrl: \"https://api.mesto.kuchevskaya.nomoredomains.xyz\",\n  baseUrl: \"https://localhost:3000\",\n  headers: {\n    // authorization: \"c7995123-32f8-4a6a-9c95-5dfea08bd5f1\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/alenakuchevskaya/Desktop/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","getProfile","fetch","credentials","then","editAvatar","avatar","method","body","JSON","stringify","editProfile","name","about","getInitialCards","addCard","link","deleteCard","id","deleteLike","addLike","changeLikeCardStatus","isLiked","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      credentials: 'include', // посылает токен в куки вместе с запросом.\n      //headers: this._headers, \n    }).then((res) => this._checkResponse(res));\n  }\n\n  editAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar,\n      }),\n    }).then((res) => this._checkResponse(res));\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about,\n      }),\n    }).then((res) => this._checkResponse(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      credentials: 'include',\n      // headers: this._headers,\n    }).then((res) => this._checkResponse(res));\n  }\n\n  addCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link,\n      }),\n    }).then((res) => this._checkResponse(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      credentials: 'include',\n      // headers: this._headers,\n    }).then((res) => this._checkResponse(res));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      credentials: 'include',\n      //headers: this._headers,\n    }).then((res) => this._checkResponse(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      credentials: 'include',\n      //headers: this._headers,\n    }).then((res) => this._checkResponse(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      credentials: 'include',\n      //headers: this._headers,\n    }).then((res) => this._checkResponse(res));\n  }\n}\n\nconst api = new Api({\n  //baseUrl: \"https://api.mesto.kuchevskaya.nomoredomains.xyz\",\n  baseUrl: \"https://localhost:3000\",\n  headers: {\n    // authorization: \"c7995123-32f8-4a6a-9c95-5dfea08bd5f1\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}