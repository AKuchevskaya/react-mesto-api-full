{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n      credentials: 'include' // посылает токен в куки вместе с запросом.\n\n    }).then(res => this._checkResponse(res));\n  }\n\n  editAvatar(_ref2) {\n    let {\n      avatar\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      }),\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  editProfile(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      }),\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      }),\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers,\n      credentials: 'include'\n    }).then(res => this._checkResponse(res));\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://api.mesto.kuchevskaya.nomoredomains.xyz\",\n  headers: {\n    // authorization: \"c7995123-32f8-4a6a-9c95-5dfea08bd5f1\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/alenakuchevskaya/Desktop/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","getProfile","fetch","credentials","then","editAvatar","avatar","method","body","JSON","stringify","editProfile","userData","name","about","getInitialCards","addCard","link","deleteCard","id","deleteLike","addLike","changeLikeCardStatus","isLiked","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers, \n      credentials: 'include', // посылает токен в куки вместе с запросом.\n    }).then((res) => this._checkResponse(res));\n  }\n\n  editAvatar({ avatar }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar,\n      }),\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  editProfile(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about,\n      }),\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  addCard({ name, link }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link,\n      }),\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._headers,\n      credentials: 'include',\n    }).then((res) => this._checkResponse(res));\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://api.mesto.kuchevskaya.nomoredomains.xyz\",\n  headers: {\n    // authorization: \"c7995123-32f8-4a6a-9c95-5dfea08bd5f1\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}